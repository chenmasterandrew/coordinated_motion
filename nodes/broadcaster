#!/usr/bin/env python
#The line above is important so that this file is interpreted with Python when running it.

# import of relevant libraries.
import rospy # module for ROS APIs
import tf
from tf.transformations import quaternion_from_euler
from geometry_msgs.msg import PoseWithCovarianceStamped # message type for initialpose

# Constants.
NEW_INITAL_POSE_TOPIC = '/initialpose'

class Broadcaster():
  def __init__(self):
    """Constructor."""
    self.__inital_pose_sub = rospy.Subscriber(NEW_INITAL_POSE_TOPIC,
                                              PoseWithCovarianceStamped,
                                              self._initial_pose_callback)
  
  def broadcast(self):
    rospy.spin()

  def _initial_pose_callback(self, msg):
    """Processing of odom message."""
    br = tf.TransformBroadcaster()
    br.sendTransform((msg.pose.pose.position.x, msg.pose.pose.position.y, 0),
                    quaternion_from_euler(msg.pose.pose.orientation.x,msg.pose.pose.orientation.y,msg.pose.pose.orientation.z),
                    rospy.Time.now(),
                    msg.header.frame_id,
                    "world")

def main():
  """Main function."""

  # 1st. initialization of node.
  rospy.init_node("broadcaster")

  # Sleep for a few seconds to wait for the registration.
  rospy.sleep(2)

  # Initialization of the class for the regular polygon motion.
  br = Broadcaster()
    
  try:
    br.broadcast()

  except rospy.ROSInterruptException:
    rospy.logerr("ROS node interrupted.")

if __name__ == "__main__":
  """Run the main function."""
  main()
