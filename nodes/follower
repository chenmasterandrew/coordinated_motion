#!/usr/bin/env python
#The line above is important so that this file is interpreted with Python when running it.

# Import of python modules.
import math # use of pi.

# import of relevant libraries.
import rospy # module for ROS APIs
import actionlib
import tf
from geometry_msgs.msg import Twist, PointStamped # message type for cmd_vel
from coordinated_motion.srv import NewFollower
from coordinated_motion.msg import AllocateAction

# Constants.
FREQUENCY = 10 #Hz.
LINEAR_VELOCITY = 0.2 # m/s
ANGULAR_VELOCITY = math.pi/1 # rad/s
DEFAULT_CMD_VEL_TOPIC = 'cmd_vel'

class Follower():
  def __init__(self, linear_velocity=LINEAR_VELOCITY, angular_velocity=ANGULAR_VELOCITY):
    """Constructor."""
    # Setting up publishers/subscribers.
    self._cmd_pub = rospy.Publisher(DEFAULT_CMD_VEL_TOPIC, Twist, queue_size=1)

    # Other variables.
    self.linear_velocity = linear_velocity # Constant linear velocity set.
    self.angular_velocity = angular_velocity # Constant angular velocity set.
    self._this_bot =  rospy.get_namespace() # name of the robot running this node
    self.listener = tf.TransformListener()

    self.server = actionlib.SimpleActionServer(self._this_bot + 'allocate', AllocateAction, self.move, False)
    self.server.start()

  def move(self, goal):
    # transform waypoint frame from world to robot
    world_waypoint = PointStamped()
    world_waypoint.point.x = goal.x
    world_waypoint.point.y = goal.y
    world_waypoint.point.z = 0.0
    world_waypoint.header.frame_id = 'world'
    world_waypoint.header.stamp = rospy.Time(0)
    robot_waypoint = self.listener.transformPoint(self._this_bot, world_waypoint)
    d = self.get_distance(0, 0, robot_waypoint.point.x, robot_waypoint.point.y)
    a = self.point_to_angle(robot_waypoint.point.x, robot_waypoint.point.y)
    self.rotate_in_place(a)
    self.move_forward(d)
    print(self._this_bot + " done moving")
    self.server.set_succeeded()
    
  def get_distance(self, x1, y1, x2, y2):
    """"Utility function for getting the distance between two points (x1,y1) and (x2,y2)."""
    return abs(((x2 - x1)**2 + (y2 - y1)**2)**0.5)

  def point_to_angle(self, x, y):
    """Utility function for converting a point (x,y) into the a positive angle in radians between the positive x axis and the ray from (0,0) to (x,y)."""
    a = math.atan2(y, x)
    if a < 0:
      a += 2*math.pi
    return a
  
  def register(self):
    rospy.wait_for_service('/new_follower')
    try:
      new_follower = rospy.ServiceProxy('/new_follower', NewFollower)
      resp1 = new_follower(self._this_bot)
    except rospy.ServiceException as e:
      print("Service call failed: %s"%e)
  
  def follow(self):
    rospy.spin()

  def move_forward(self, distance):
    """Function to move_forward for a given distance."""
    # Rate at which to operate the while loop.
    rate = rospy.Rate(FREQUENCY)

    # Setting velocities. 
    twist_msg = Twist()
    twist_msg.linear.x = self.linear_velocity
    start_time = rospy.get_rostime()
    duration = rospy.Duration(distance/twist_msg.linear.x)

    # Loop.
    while not rospy.is_shutdown():
      # Check if traveled of given distance based on time.
      if rospy.get_rostime() - start_time >= duration:
        break

      # Publish message.
      self._cmd_pub.publish(twist_msg)

      # Sleep to keep the set publishing frequency.
      rate.sleep()

    # Traveled the required distance, stop.
    self.stop()
    
  def rotate_in_place(self, rotation_angle):
    """
    Rotate in place the robot of rotation_angle (rad) based on fixed velocity.
    Assumption: Counterclockwise rotation.
    """
    twist_msg = Twist()
    twist_msg.angular.z = self.angular_velocity
    
    duration = rotation_angle / twist_msg.angular.z
    start_time = rospy.get_rostime()
    rate = rospy.Rate(FREQUENCY)
    while not rospy.is_shutdown():
      # Check if done
      if rospy.get_rostime() - start_time >= rospy.Duration(duration):
        break
          
      # Publish message.
      self._cmd_pub.publish(twist_msg)
      
      # Sleep to keep the set frequency.
      rate.sleep()

    # Rotated the required angle, stop.
    self.stop()

  def stop(self):
    """Stop the robot."""
    twist_msg = Twist()
    self._cmd_pub.publish(twist_msg)

def main():
  """Main function."""

  # 1st. initialization of node.
  rospy.init_node("follower")

  # Sleep for a few seconds to wait for the registration.
  rospy.sleep(2)

  # Initialization of the class for the regular polygon motion.
  f = Follower()

  f.register()
  
  try:
    f.follow()

  except rospy.ROSInterruptException:
    rospy.logerr("ROS node interrupted.")


if __name__ == "__main__":
  """Run the main function."""
  main()
